/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package pwrtriangle;

import javax.swing.*;

/**
 *
 * @author bbearden
 */
public class Panel extends javax.swing.JPanel {

    /**
     * Creates new form Panel
     */
    public Panel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mode = new javax.swing.JComboBox();
        operand1 = new javax.swing.JSpinner();
        result = new javax.swing.JTextField();
        opLabel1 = new javax.swing.JLabel();
        opUnit1 = new javax.swing.JLabel();
        opLabel2 = new javax.swing.JLabel();
        opUnit2 = new javax.swing.JLabel();
        resultLabel = new javax.swing.JLabel();
        resultUnit = new javax.swing.JLabel();
        operand2 = new javax.swing.JSpinner();

        mode.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "P/Q", "P/PF", "Q/PF" }));
        mode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modeActionPerformed(evt);
            }
        });

        operand1.setModel(new javax.swing.SpinnerNumberModel(Double.valueOf(0.0d), Double.valueOf(0.0d), null, Double.valueOf(100.0d)));
        operand1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                operand1StateChanged(evt);
            }
        });

        result.setEditable(false);
        result.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        result.setText("0");

        opLabel1.setText("Active Power");

        opUnit1.setText("W");

        opLabel2.setText("Reactive Power");

        opUnit2.setText("VAr");

        resultLabel.setText("Power Factor");

        operand2.setModel(new javax.swing.SpinnerNumberModel(Double.valueOf(0.0d), Double.valueOf(0.0d), null, Double.valueOf(100.0d)));
        operand2.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                operand2StateChanged(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(mode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(opLabel2)
                    .addComponent(opLabel1)
                    .addComponent(resultLabel))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(result, javax.swing.GroupLayout.DEFAULT_SIZE, 75, Short.MAX_VALUE)
                    .addComponent(operand1)
                    .addComponent(operand2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(opUnit1)
                    .addComponent(opUnit2)
                    .addComponent(resultUnit))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(mode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(opLabel1)
                    .addComponent(opUnit1)
                    .addComponent(operand1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(opLabel2)
                        .addComponent(opUnit2))
                    .addComponent(operand2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(resultLabel)
                    .addComponent(result, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(resultUnit))
                .addContainerGap(16, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void modeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modeActionPerformed

        String modeStr = (String)mode.getSelectedItem();

        if(modeStr.equals("P/Q"))
            setModePq();
        else if(modeStr.equals("P/PF"))
            setModePpf();
        else if(modeStr.equals("Q/PF"))
            setModeQpf();

        ((SpinnerNumberModel)operand1.getModel()).setValue(0);
        ((SpinnerNumberModel)operand2.getModel()).setValue(0);
        result.setText("0");
    }//GEN-LAST:event_modeActionPerformed

    private void operand1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_operand1StateChanged
        calculateResult();
    }//GEN-LAST:event_operand1StateChanged

    private void operand2StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_operand2StateChanged
        calculateResult();
    }//GEN-LAST:event_operand2StateChanged


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox mode;
    private javax.swing.JLabel opLabel1;
    private javax.swing.JLabel opLabel2;
    private javax.swing.JLabel opUnit1;
    private javax.swing.JLabel opUnit2;
    private javax.swing.JSpinner operand1;
    private javax.swing.JSpinner operand2;
    private javax.swing.JTextField result;
    private javax.swing.JLabel resultLabel;
    private javax.swing.JLabel resultUnit;
    // End of variables declaration//GEN-END:variables

    private void setModePq() {

        opLabel1.setText("Active Power");
        opUnit1.setText("W");

        opLabel2.setText("Reactive Power");
        opUnit2.setText("VAr");

        resultLabel.setText("Power Factor");
        resultUnit.setText("");

    }

    private void setModePpf() {

        opLabel1.setText("Active Power");
        opUnit1.setText("W");

        opLabel2.setText("Power Factor");
        opUnit2.setText("");

        resultLabel.setText("Reactive Power");
        resultUnit.setText("VAr");

    }

    private void setModeQpf() {

        opLabel1.setText("Reactive Power");
        opUnit1.setText("VAr");

        opLabel2.setText("Power Factor");
        opUnit2.setText("");

        resultLabel.setText("Active Power");
        resultUnit.setText("W");

    }

    private void calculateResult() {

        String modeStr = (String)mode.getSelectedItem();
        double resultVal = 0;
        double op1 = ((SpinnerNumberModel)operand1.getModel()).getNumber().doubleValue();
        double op2 = ((SpinnerNumberModel)operand2.getModel()).getNumber().doubleValue();

        if(modeStr.equals("P/Q")) {
            resultVal = Solver.solveForPf(op1, op2);
        } else if(modeStr.equals("P/PF")) {
            resultVal = Solver.solveForQ(op1, op2);
        } else if(modeStr.equals("Q/PF")) {
            resultVal = Solver.solveForP(op1, op2);
        }

        String resultStr = String.format("%.3f", resultVal);
        result.setText(resultStr);

    }
}
